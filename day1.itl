

func read_input(list1: Array@, list2: Array@)
{
    fp := std::open_file_or_panic("input/day1.txt",file_mode::read,file_opt::open);

    buf : c8[256];
    rc := file_read_res::success;

    while(rc == file_read_res::success)
    {
        [str,rc] := std::read_file_str(&fp,buf);

        split := std::split_str(str,"   ");
        strings := recast_arr(const string,std::array_buffer(&split));

        std::assert(strings.len == 2);

        std::push_u64(list1,std::parse_u64(strings[0]));
        std::push_u64(list2,std::parse_u64(strings[1]));

        std::destroy_array(&split);
    }

    std::close_file(&fp);
}

func sort_least_u64(v1_ptr: const byte@, v2_ptr: const byte@) bool
{
    v1 := @cast(u64@,v1_ptr);
    v2 := @cast(u64@,v2_ptr);

    return v1 > v2;
}

func main() s32
{
    list1 := std::make_array(sizeof_type(u64));
    list2 := std::make_array(sizeof_type(u64));
    
    read_input(&list1,&list2);

    std::sort(&list1,&sort_least_u64);
    std::sort(&list2,&sort_least_u64);

    table := std::make_hash_table(sizeof_type(u64),sizeof_type(u64),&hash_u64);

    arr1 := recast_arr(u64,std::array_buffer(&list1));
    arr2 := recast_arr(u64,std::array_buffer(&list2));

    for v in arr2
    {
        value := cast(u64@,std::hash_table_lookup(&table,&v));

        if(!value)
        {
            insert: u64 = 0;
            value = cast(u64@,std::hash_table_add(&table,&v,&insert));
        }

        @value += 1;
    }

    total_diff: s64 = 0;
    mul_sum: s64 = 0;

    for i in 0 < arr1.len
    {
        v1 := arr1[i];
        v2 := arr2[i];

        total_diff += std::abs(v1 - v2);

        value := cast(u64@,std::hash_table_lookup(&table,&v1));

        if(value)
        {
            mul_sum += v1 * @value;
        }
    }

    std::println("part1: {}",total_diff);
    std::println("part2: {}",mul_sum);

    std::destroy_array(&list1);
    std::destroy_array(&list2);
    std::destroy_hash_table(&table);

    return 0;
}