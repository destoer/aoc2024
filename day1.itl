

func read_input(list1: Array@, list2: Array@)
{
    fp := std::open_file_or_panic("input/day1.txt",file_mode::read,file_opt::open);

    buf : c8[256];
    rc := file_read_res::success;

    while(rc == file_read_res::success)
    {
        [str,rc] := std::read_file_str(&fp,buf);

        split := std::split_str(str,"   ");

        if std::count_array(&split) != 2
        {
            std::crash_and_burn("invalid input");
        }

        strings := cast(string@,std::array_data(&split));

        [value,str] := std::parse_value(strings[0]);
        std::push_array(list1,&value.v);

        [value,str] = std::parse_value(strings[1]);
        std::push_array(list2,&value.v);

        std::destroy_array(&split);
    }

    std::close_file(&fp);
}

func sort_least_u32(v1_ptr: const byte@, v2_ptr: const byte@) bool
{
    v1 := @cast(u32@,v1_ptr);
    v2 := @cast(u32@,v2_ptr);

    return v1 > v2;
}

func main() s32
{
    list1 := std::make_array(sizeof_type(u32));
    list2 := std::make_array(sizeof_type(u32));
    
    read_input(&list1,&list2);

    std::sort(&list1,&sort_least_u32);
    std::sort(&list2,&sort_least_u32);

    table := std::make_hash_table(sizeof_type(u32),sizeof_type(u32),&hash_u32);

    arr1 := cast(u32@,std::array_data(&list1));
    arr2 := cast(u32@,std::array_data(&list2));

    size := std::count_array(&list1);

    for i in 0 < size
    {
        v2 := arr2[i];

        value := cast(u32@,std::hash_table_lookup(&table,&v2));

        if(!value)
        {
            insert: u32 = 0;
            value = cast(u32@,std::hash_table_add(&table,&v2,&insert));
        }

        @value += 1;
    }

    total_diff: s64 = 0;
    mul_sum: s64 = 0;

    for i in 0 < size
    {
        v1 := arr1[i];
        v2 := arr2[i];

        total_diff += std::abs(v1 - v2);

        value := cast(u32@,std::hash_table_lookup(&table,&v1));

        if(value)
        {
            mul_sum += v1 * @value;
        }
    }

    std::println("part1: {}",total_diff);
    std::println("part2: {}",mul_sum);

    std::destroy_array(&list1);
    std::destroy_array(&list2);
    std::destroy_hash_table(&table);

    return 0;
}