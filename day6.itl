import "grid"

enum direction : Vec2I
{
    up = {0,-1},
    right = {1,0},
    down = {0,1},
    left = {-1,0},
}

func sim_guard(grid: Grid@, pos: Vec2I, seen: u8[]) [bool,u32]
{
    // reset our bitset of travelled dirs
    for @v in seen
    {
        @v = 0;
    }

    unique: u32 = 0;
    dir := direction::up;

    while in_grid_bounds(grid,pos)
    {
        start := (pos.y * grid.width) + pos.x;
        flags := &seen[start];

        unique += cast(u32,@flags == 0);

        dir_idx := cast(u32,dir);
        mask := 1 << dir_idx;

        // hit same direction twice we have looped
        if (@flags & mask) != 0
        {
            return true, unique;
        }

        @flags |= mask;

        next_pos: const Vec2I = {pos.x + dir.x,pos.y + dir.y};

        if !in_grid_bounds(grid,next_pos)
        {
            return false, unique;
        }

        next := (next_pos.y * grid.width) + next_pos.x;

        // Our turn can be invalid
        while grid.buffer.buf[next] != '.'
        {
            dir = cast(direction,(cast(u32,dir) + 1) & 3);
            next = ((pos.y + dir.y) * grid.width) + (pos.x + dir.x);
        }

        pos.x += dir.x;
        pos.y += dir.y;
    }

    return false, unique;
}

func main() s32 
{
    grid := read_grid("input/day6.txt");

    buffer := grid.buffer.buf;

    pos: Vec2I = {?};

    // Find the starting posistion
    for [v,i] in buffer 
    {
        if v == '^'
        {
            pos.x = i % grid.width;
            pos.y = i / grid.width;
        }
    }

    // goodbye guard
    grid.buffer.buf[(pos.y * grid.width) + pos.x] = '.';


    std::println("grid {} {}",grid.width,grid.height);
    std::println("starting pos {} {}",pos.x,pos.y);

    // part 1
    seen_vanilla: u8[] = {
        cast(u8@,std::alloc_heap_panic(&global_heap,grid.buffer.size,sizeof_type(u8))),
        grid.buffer.size
    };

    [looped,unique_vanilla] := sim_guard(&grid,pos,seen_vanilla);

    // part 2
    seen_block: u8[] = {
        cast(u8@,std::alloc_heap_panic(&global_heap,grid.buffer.size,sizeof_type(u8))),
        grid.buffer.size
    };

    potential_blocks: u32 = 0;

    // only have to add obstacles where we have walked before
    for [v, i] in seen_vanilla
    {
        if v != 0
        {
            old := grid.buffer.buf[i];

            // add the obstacle
            grid.buffer.buf[i] = 'O';

            [looped,unique] := sim_guard(&grid,pos,seen_block);
            potential_blocks += cast(u32,looped);

            // put the grid back into its old state
            grid.buffer.buf[i] = old;
        }
    }


    std::println("part1: {}",unique_vanilla);
    std::println("part2: {}",potential_blocks);

    std::destroy_array(&grid.buffer);
    std::free_heap(&global_heap,cast(byte@@,&seen_vanilla.data));
    std::free_heap(&global_heap,cast(byte@@,&seen_block.data));
    return 0;
}
